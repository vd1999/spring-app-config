import net.sf.JRecord.Common.RecordException;
import net.sf.JRecord.Details.AbstractLine;
import net.sf.JRecord.Details.LayoutDetail;
import net.sf.JRecord.Details.RecordDetail;
import net.sf.JRecord.IO.CobolIoProvider;
import net.sf.JRecord.IO.ICobolIOBuilder;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

public class TextConverter {

    public static void main(String[] args) {
        String copybookFile = "path/to/copybook.cob";
        String inputFile = "path/to/input.dat";
        String outputFile = "path/to/output.txt";

        try {
            convertEBCDICToASCII(copybookFile, inputFile, outputFile);
            System.out.println("Conversion complete!");
        } catch (IOException | RecordException e) {
            System.err.println("An error occurred during the conversion: " + e.getMessage());
        }
    }

    public static void convertEBCDICToASCII(String copybookFile, String inputFile, String outputFile)
            throws IOException, RecordException {
        FileInputStream fis = null;
        FileOutputStream fos = null;

        try {
            fis = new FileInputStream(inputFile);
            fos = new FileOutputStream(outputFile);

            LayoutDetail layout = getLayoutFromCopyBook(copybookFile);
            ICobolIOBuilder ioBuilder = CobolIoProvider.getInstance().newIOBuilder(layout);

            AbstractLine line;
            while ((line = ioBuilder.readLine(fis)) != null) {
                int fieldCount = layout.getRecord(0).getFieldCount();

                // Convert EBCDIC line to ASCII line
                for (int i = 0; i < fieldCount; i++) {
                    String fieldValue = line.getFieldValue(i);

                    // Convert EBCDIC field value to ASCII
                    byte[] ebcdicBytes = fieldValue.getBytes(StandardCharsets.ISO_8859_1);
                    String asciiValue = new String(ebcdicBytes, StandardCharsets.US_ASCII);

                    // Update the field value with ASCII value
                    line.setFieldValue(i, asciiValue);
                }

                // Write the converted ASCII line to the output file
                fos.write(line.getBytes());
            }
        } finally {
            // Close the input and output streams
            if (fis != null) {
                fis.close();
            }
            if (fos != null) {
                fos.close();
            }
        }
    }

    private static LayoutDetail getLayoutFromCopyBook(String copybookFile) throws IOException, RecordException {
        FileInputStream fis = null;

        try {
            fis = new FileInputStream(copybookFile);
            RecordDetail recordDetail = LayoutDetail.createDtlFromCobol(fis, copybookFile);
            return recordDetail.asLayoutDetail();
        } finally {
            if (fis != null) {
                fis.close();
            }
        }
    }
}
