import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.springframework.kafka.listener.ConcurrentMessageListenerContainer;
import org.springframework.kafka.listener.MessageListener;
import org.springframework.kafka.listener.config.ContainerProperties;

import java.time.Duration;
import java.util.Collections;
import java.util.Properties;

public class MultiThreadedKafkaConsumers {

    private static final String BOOTSTRAP_SERVERS = "localhost:9092";
    private static final String GROUP_ID_1 = "group1";
    private static final String GROUP_ID_2 = "group2";
    private static final String GROUP_ID_3 = "group3";
    private static final String TOPIC_1 = "topic1";
    private static final String TOPIC_2 = "topic2";
    private static final String TOPIC_3 = "topic3";

    public static void main(String[] args) {
        createAndRunConsumer(GROUP_ID_1, 1, TOPIC_1);
        createAndRunConsumer(GROUP_ID_2, 2, TOPIC_2);
        createAndRunConsumer(GROUP_ID_3, 3, TOPIC_3);
    }

    private static void createAndRunConsumer(String groupId, int numThreads, String topic) {
        Properties consumerProps = new Properties();
        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, BOOTSTRAP_SERVERS);
        consumerProps.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);
        consumerProps.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
        consumerProps.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());

        ContainerProperties containerProperties = new ContainerProperties(topic);

        // Set the number of threads for the listener container
        containerProperties.setMessageListener(new MessageListener<String, String>() {
            @Override
            public void onMessage(ConsumerRecord<String, String> record) {
                // Process the received message
                System.out.println("Received message in " + groupId + " thread: " +
                        Thread.currentThread().getName() +
                        ", Message: " + record.value());
            }
        });

        ConcurrentMessageListenerContainer<String, String> listenerContainer =
                new ConcurrentMessageListenerContainer<>(
                        createKafkaConsumer(consumerProps),
                        containerProperties);
        
        // Set the number of threads for the listener container
        listenerContainer.setConcurrency(numThreads);

        // Start the listener container
        listenerContainer.start();
    }

    private static KafkaConsumer<String, String> createKafkaConsumer(Properties consumerProps) {
        return new KafkaConsumer<>(consumerProps);
    }
}




@Autowired
private KafkaTemplate<String, Object> kafkaTemplate;

public void sendMessageToTopic1(String message) {
    kafkaTemplate.send("topic1", message);
}

public void sendMessageToTopic2(Integer number) {
    kafkaTemplate.send("topic2", number);
}

public void sendMessageToTopic3(MyCustomObject customObject) {
    kafkaTemplate.send("topic3", customObject);
}

