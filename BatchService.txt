import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.support.TransactionCallbackWithoutResult;
import org.springframework.transaction.support.TransactionTemplate;

@Service
public class BatchService {

    private final JdbcTemplate jdbcTemplate;
    private final TransactionTemplate transactionTemplate;

    @Autowired
    public BatchService(JdbcTemplate jdbcTemplate, TransactionTemplate transactionTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.transactionTemplate = transactionTemplate;
    }

    @Transactional
    public void processBatch() {
        transactionTemplate.execute(new TransactionCallbackWithoutResult() {
            @Override
            protected void doInTransactionWithoutResult(TransactionStatus status) {
                // Disable auto-commit before the batch
                jdbcTemplate.getDataSource().getConnection().setAutoCommit(false);

                try {
                    // Perform batch processing here

                    // Commit the transaction after the batch
                    status.flush();
                } catch (Exception e) {
                    // Handle exceptions and set the transaction to rollback
                    status.setRollbackOnly();
                } finally {
                    // Enable auto-commit after the batch
                    try {
                        jdbcTemplate.getDataSource().getConnection().setAutoCommit(true);
                    } catch (Exception e) {
                        // Handle exceptions if needed
                    }
                }
            }
        });
    }
}
